/* eslint-disable no-return-assign, no-sequences */
'use strict';
Reflect.defineProperty(exports, '__esModule', { value: true });

exports.default = function get(object, prop) {
  const stringprop = prop.toString();
  for (const trap of this.traps) {
    if (trap.condition({ prop, stringprop })) return trap.value(object, prop, stringprop);
  }
  const new_parts = [...this.parts, prop.toString()];

  if (!this.use_cache) {
    return new this.constructor(this.base,
      this._properties.reduce((obj, p) => (obj[p] = this[p], obj), {}), new_parts);
  }
  const id = [this.base, ...new_parts].join(process.pid);
  return this.constructor.cache[id] || (this.constructor.cache[id] = new this.constructor(this.base,
    this._properties.reduce((obj, p) => (obj[p] = this[p], obj), {}), new_parts));
};
